/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FoodCarat;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class customerPayment extends javax.swing.JFrame {

    /**
     * Creates new form customerPayment
     */
    private int orderID;
    private String orderType;
    
    public customerPayment(int orderID, String orderType) {
        this.orderType = orderType;
        this.orderID = orderID;
        initComponents();
        displayOrderDetails();
    }
    
    private void displayOrderDetails() {
        try {
            Order order = new Order(orderType, User.getSessionEmail());
            String orderIDStr = String.valueOf(orderID);
            String[] tokens = order.getOrder(orderIDStr); // This might throw IOException

            // Extract the relevant parameters
            String orderType = tokens[1];
            String orderItems = tokens[2];
            String orderStatus = tokens[3];
            String customerEmail = tokens[4];
            String deliveryFee = tokens[7];
            String paymentTotal = tokens[8];

            // Get customer point balance
            Customer customer = new Customer(User.getSessionEmail());
            int pointBalance = customer.getPoints();
            String creditBalance = "0";

            // Display
            sOrderID.setText(String.valueOf(orderID));
            sOrderType.setText(String.valueOf(orderType));
            sDeliveryFee.setText("RM " + String.valueOf(deliveryFee));
            sPayTotal.setText("RM " + String.valueOf(paymentTotal));

            User user = new User();
            String role = user.getRoleByEmail(customerEmail, "resources/user.txt");
            if (role != null && role.equals("customer")) {
                creditBalance = user.getRoleSpecificData(User.getSessionEmail(), role, 2);
            }
            sCreditBalance.setText(creditBalance);
            sPointBalance.setText(String.valueOf(pointBalance));

            populateOrderItemsTable(orderItems);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading order details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void populateOrderItemsTable(String orderItemsString) {
        DefaultTableModel model = (DefaultTableModel) tOrderItem.getModel();
        model.setRowCount(0);  //clear table

        //retrieve the order item
        orderItemsString = orderItemsString.replace("[", "").replace("]", "");
        String[] items = orderItemsString.split("\\|");

        // Loop through each item and add it to the table
        for (String item : items) {
            // Split each item by the semicolon to get itemID and quantity
            String[] itemDetails = item.split(";");
            if (itemDetails.length == 2) {
                String itemID = itemDetails[0];
                String quantity = itemDetails[1];
                
                Item item1 = new Item();
                String[] itemData = item1.itemData(itemID);
                String itemName = itemData[1];  
                double itemPrice = Double.parseDouble(itemData[3]);
                double orderItemTotal = Integer.parseInt(quantity) * itemPrice;
                
                String vendorName = item1.getVendorNameByItemID(Integer.parseInt(itemID));
                sVendorName.setText(String.valueOf(vendorName));

                // Add the item to the table
                model.addRow(new Object[]{itemName, "RM " + itemPrice, quantity, "RM " + orderItemTotal});
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tOrderItem = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        sOrderID = new javax.swing.JLabel();
        sVendorName = new javax.swing.JLabel();
        sOrderType = new javax.swing.JLabel();
        sDeliveryFee = new javax.swing.JLabel();
        sPayTotal = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        tfRedeemPoints = new javax.swing.JSpinner();
        bPay = new javax.swing.JButton();
        sCreditBalance = new javax.swing.JLabel();
        sPointBalance = new javax.swing.JLabel();
        bBackMain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Cooper Black", 0, 36)); // NOI18N
        jLabel1.setText("FoodCarat Food Court");

        jLabel2.setFont(new java.awt.Font("Cooper Black", 0, 24)); // NOI18N
        jLabel2.setText("Payment");

        jLabel3.setText("Order ID:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Order Summary:");

        jLabel5.setText("Order From:");

        jLabel6.setText("Order Type:");

        jLabel7.setText("Delivery Fee:");

        jLabel8.setText("Payment Total:");

        tOrderItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Unit Price", "Quantity", "Total Price"
            }
        ));
        jScrollPane1.setViewportView(tOrderItem);

        jLabel10.setText("Order Item(s):");

        sOrderID.setText("orderID");

        sVendorName.setText("vendorName");

        sOrderType.setText("orderType");

        sDeliveryFee.setText("deliveryFee");

        sPayTotal.setText("payTotal");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setText("Payment Details:");

        jLabel18.setText("Credit Balance:");

        jLabel19.setText("Point Balance:");

        jLabel20.setText("Redeem Points:");

        bPay.setText("Pay");
        bPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPayActionPerformed(evt);
            }
        });

        sCreditBalance.setText("creditBalance");

        sPointBalance.setText("pointBalance");

        bBackMain.setText("Back to Main Page");
        bBackMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bBackMain)
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(bPay, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel18)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sCreditBalance)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(sPointBalance)
                                            .addGap(112, 112, 112)
                                            .addComponent(jLabel20)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tfRedeemPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel10))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sOrderID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sVendorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sOrderType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(136, 136, 136)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(29, 29, 29)
                                        .addComponent(sDeliveryFee))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(sPayTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)))))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(bBackMain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(sOrderID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(sVendorName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(sOrderType)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(sDeliveryFee))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(sPayTotal))
                        .addGap(22, 22, 22)))
                .addGap(7, 7, 7)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(sCreditBalance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(tfRedeemPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(sPointBalance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(bPay)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPayActionPerformed
        //payment date
        Calendar today = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(today.getTime());

        //retrieve data
        int redeemPoints = (int) tfRedeemPoints.getValue(); 
        int currentBalance = Integer.parseInt(sCreditBalance.getText()); 
        int currentPoints = Integer.parseInt(sPointBalance.getText()); 
        String payTotalStr = sPayTotal.getText().replaceAll("RM ", "");
        double payTotal = Double.parseDouble(payTotalStr); 
        double deliveryFee = Double.parseDouble(sDeliveryFee.getText().replace("RM ", ""));
        
        double orderTotal = payTotal - deliveryFee; //calculate order total excluding delivery fee
        int maxRedeemPoints = (int) (orderTotal * 0.25 / 0.01); //calculate the maximum points to redeem (25% of the order total exclude delivery)

        //check if points more than current points and maximum points redeem
        if (redeemPoints > currentPoints) {
            JOptionPane.showMessageDialog(rootPane, "Points to redeem exceeds current balance.");
            return;
        } else if (redeemPoints < 0) {
            JOptionPane.showMessageDialog(rootPane, "Points to redeem cannot be negative.");
            return;
        } else if (redeemPoints > maxRedeemPoints) {
            JOptionPane.showMessageDialog(rootPane, "You can only redeem a maximum of " + maxRedeemPoints + " points (25% of the order total excluding delivery fee)");
            return;
        }

        //calculate the total redeemable amount based on points into RM
        double redeemAmount = redeemPoints * 0.01;

        //ensure the total payable amount (after redemption) is less than or equal to the payment total
        double cusPayableAmount = redeemAmount + currentBalance; 
        if (cusPayableAmount < payTotal) {
            JOptionPane.showMessageDialog(rootPane, "Insufficient balance to complete the payment. Please contact admin to top up your credit or use more points.");
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader("resources/customerOrder.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] tokens = line.split(",");
                int cusOrderID = Integer.parseInt(tokens[0]);

                if (cusOrderID == Integer.parseInt(sOrderID.getText())) {

                    double newPaymentTotal = payTotal - redeemAmount + deliveryFee;; //update the payment total

                    //deduct points from the customer
                    Customer customer = new Customer(User.getSessionEmail());
                    customer.deductPoints(redeemPoints);

                    //write the payment details to the order
                    Order order = new Order(orderID);
                    order.writePaymentDetails(orderID, newPaymentTotal, formattedDate);

                    JOptionPane.showMessageDialog(rootPane, "Payment successful.");
                    dispose();
                    customerReceipt frame = new customerReceipt(orderID, orderType);
                    frame.setVisible(true);
                    return;
                }
            }
            JOptionPane.showMessageDialog(rootPane, "No matching booking found.");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "An error occurred while saving payment details.");
        }
    }//GEN-LAST:event_bPayActionPerformed

    private void bBackMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackMainActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "Your order will be discarded. Are you sure to proceed?");
        if (confirm == JOptionPane.YES_OPTION){
            Order order = new Order();
            order.deleteIncompleteOrder(orderID);

            //Back to the main page
            this.dispose();
            customerMain frame = new customerMain();
            frame.setVisible(true);
        }
    }//GEN-LAST:event_bBackMainActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
       
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBackMain;
    private javax.swing.JButton bPay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel sCreditBalance;
    private javax.swing.JLabel sDeliveryFee;
    private javax.swing.JLabel sOrderID;
    private javax.swing.JLabel sOrderType;
    private javax.swing.JLabel sPayTotal;
    private javax.swing.JLabel sPointBalance;
    private javax.swing.JLabel sVendorName;
    private javax.swing.JTable tOrderItem;
    private javax.swing.JSpinner tfRedeemPoints;
    // End of variables declaration//GEN-END:variables
}
