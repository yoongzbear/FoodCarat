/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FoodCarat;

import java.awt.Color;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class managerNotification extends javax.swing.JFrame {

    /**
     * Creates new form managerNotification
     */
    public managerNotification() {
        initComponents();
        setLocationRelativeTo(null);
        complaintNotificationtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handleTableClick(evt);
            }
        });
        // Hide the "review ID" column (index 4)
        complaintNotificationtable.getColumnModel().getColumn(4).setMinWidth(0);
        complaintNotificationtable.getColumnModel().getColumn(4).setMaxWidth(0);
        complaintNotificationtable.getColumnModel().getColumn(4).setWidth(0);
        complaintNotificationtable.getColumnModel().getColumn(4).setPreferredWidth(0);
        getContentPane().setBackground(new Color(252, 204, 196));
        
        //show all the data
        Manager manager = new Manager();
        List<String[]> allData = manager.getFilteredReviews(0);  // 0 means no filtering by month
        // Populate the table with all data
        DefaultTableModel model = (DefaultTableModel) complaintNotificationtable.getModel();
        model.setRowCount(0);
        for (String[] complaint : allData) {
            model.addRow(complaint);  // Add row to the table
        }
        fillEmptyRowSpace();
    }
    
    private void handleTableClick(java.awt.event.MouseEvent evt) {
        // Check if the user clicked a row
        int selectedRow = complaintNotificationtable.getSelectedRow();
        if (selectedRow >= 0) {
            // Retrieve any one of the data from the selected row
            Object emailObj = complaintNotificationtable.getValueAt(selectedRow, 2);

            // Validate if data exists in the row
            if (emailObj == null || emailObj.toString().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No data found in the selected row!", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Stop further execution
            }
            
            // Show confirmation dialog
            int result = JOptionPane.showConfirmDialog(
                    this,
                    "Resolve this complaint by giving 50 points to the customer?",
                    "Confirm Action",
                    JOptionPane.YES_NO_OPTION
            );

            if (result == JOptionPane.YES_OPTION) {
                User user = new User();
                // Retrieve email and reviewID from the selected row
                String customerEmail = (String) complaintNotificationtable.getValueAt(selectedRow, 2);
                int reviewID = Integer.parseInt(complaintNotificationtable.getValueAt(selectedRow, 4).toString());

                // Update points in the file
                Manager manager = new Manager();
                manager.updateReviewStatus(reviewID);
                manager.updateCustomerPoint(customerEmail);
                JOptionPane.showMessageDialog(this, "Complaint resolved, points updated successfully!");
                // Refresh the table by calling the search action
                searchbtnActionPerformed(null);
            }
        }
    }
    
    private void fillEmptyRowSpace() {   
        DefaultTableModel tableModel = (DefaultTableModel) complaintNotificationtable.getModel();        
        int rowCount = tableModel.getRowCount(); // Current row count in the table
        int tableHeight = complaintNotificationtable.getParent().getHeight(); // Get the height of the table's parent container
        int rowHeight= complaintNotificationtable.getRowHeight();

        int targetRowCount = tableHeight / rowHeight; // Calculate how many rows fit in the visible area

        // Add empty rows if needed to reach the target row count
        int emptyRowsNeeded = targetRowCount - rowCount;
        for (int i = 0; i < emptyRowsNeeded; i++) {
            tableModel.addRow(new Object[]{"", ""});  // Adding empty rows based on the column structure
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Lnotification = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        complaintNotificationtable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchbtn = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();
        monthChooser = new com.toedter.calendar.JMonthChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Lnotification.setFont(new java.awt.Font("Cooper Black", 0, 36)); // NOI18N
        Lnotification.setText("Notification");

        complaintNotificationtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No", "Customer", "Email", "Complaints", "Review ID"
            }
        ));
        jScrollPane1.setViewportView(complaintNotificationtable);

        jLabel2.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        jLabel2.setText("Month:");

        searchbtn.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        backbtn.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        backbtn.setText("Main Menu");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(312, 312, 312)
                        .addComponent(Lnotification))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(81, 81, 81))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)))
                                .addComponent(monthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchbtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(backbtn)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(backbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Lnotification)
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(monthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addComponent(searchbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        int monthNumber = monthChooser.getMonth() + 1; 
        
        Manager manager = new Manager(); 

        // Get the filtered reviews based on the selected month
        List<String[]> complaintData = manager.getFilteredReviews(monthNumber);
        DefaultTableModel model = (DefaultTableModel) complaintNotificationtable.getModel();
        if (complaintData.isEmpty()) {
            if (monthNumber != 0) {
            JOptionPane.showMessageDialog(this, "No complaints found for this month.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
            complaintData = manager.getFilteredReviews(0);  // Fetch all data
        }
        // Clear the table before adding new data
        model.setRowCount(0);
        // Loop through the complaintData (filtered or all) and add each row to the table
        for (String[] complaint : complaintData) {
            model.addRow(complaint);
        }
        fillEmptyRowSpace();
    }//GEN-LAST:event_searchbtnActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        this.dispose();
        new managerMain().setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(managerNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(managerNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(managerNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(managerNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new managerNotification().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Lnotification;
    private javax.swing.JButton backbtn;
    private javax.swing.JTable complaintNotificationtable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JMonthChooser monthChooser;
    private javax.swing.JButton searchbtn;
    // End of variables declaration//GEN-END:variables
}
